// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tensorflow/core/framework/step_stats.proto

package tensorflow

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// An allocation/de-allocation operation performed by the allocator.
type AllocationRecord struct {
	// The timestamp of the operation.
	AllocMicros int64 `protobuf:"varint,1,opt,name=alloc_micros,json=allocMicros,proto3" json:"alloc_micros,omitempty"`
	// Number of bytes allocated, or de-allocated if negative.
	AllocBytes           int64    `protobuf:"varint,2,opt,name=alloc_bytes,json=allocBytes,proto3" json:"alloc_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationRecord) Reset()         { *m = AllocationRecord{} }
func (m *AllocationRecord) String() string { return proto.CompactTextString(m) }
func (*AllocationRecord) ProtoMessage()    {}
func (*AllocationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{0}
}

func (m *AllocationRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationRecord.Unmarshal(m, b)
}
func (m *AllocationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationRecord.Marshal(b, m, deterministic)
}
func (m *AllocationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationRecord.Merge(m, src)
}
func (m *AllocationRecord) XXX_Size() int {
	return xxx_messageInfo_AllocationRecord.Size(m)
}
func (m *AllocationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationRecord proto.InternalMessageInfo

func (m *AllocationRecord) GetAllocMicros() int64 {
	if m != nil {
		return m.AllocMicros
	}
	return 0
}

func (m *AllocationRecord) GetAllocBytes() int64 {
	if m != nil {
		return m.AllocBytes
	}
	return 0
}

type AllocatorMemoryUsed struct {
	AllocatorName string `protobuf:"bytes,1,opt,name=allocator_name,json=allocatorName,proto3" json:"allocator_name,omitempty"`
	// These are per-node allocator memory stats.
	TotalBytes int64 `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	PeakBytes  int64 `protobuf:"varint,3,opt,name=peak_bytes,json=peakBytes,proto3" json:"peak_bytes,omitempty"`
	// The bytes that are not deallocated.
	LiveBytes int64 `protobuf:"varint,4,opt,name=live_bytes,json=liveBytes,proto3" json:"live_bytes,omitempty"`
	// The allocation and deallocation timeline.
	AllocationRecords []*AllocationRecord `protobuf:"bytes,6,rep,name=allocation_records,json=allocationRecords,proto3" json:"allocation_records,omitempty"`
	// These are snapshots of the overall allocator memory stats.
	// The number of live bytes currently allocated by the allocator.
	AllocatorBytesInUse  int64    `protobuf:"varint,5,opt,name=allocator_bytes_in_use,json=allocatorBytesInUse,proto3" json:"allocator_bytes_in_use,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocatorMemoryUsed) Reset()         { *m = AllocatorMemoryUsed{} }
func (m *AllocatorMemoryUsed) String() string { return proto.CompactTextString(m) }
func (*AllocatorMemoryUsed) ProtoMessage()    {}
func (*AllocatorMemoryUsed) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{1}
}

func (m *AllocatorMemoryUsed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocatorMemoryUsed.Unmarshal(m, b)
}
func (m *AllocatorMemoryUsed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocatorMemoryUsed.Marshal(b, m, deterministic)
}
func (m *AllocatorMemoryUsed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocatorMemoryUsed.Merge(m, src)
}
func (m *AllocatorMemoryUsed) XXX_Size() int {
	return xxx_messageInfo_AllocatorMemoryUsed.Size(m)
}
func (m *AllocatorMemoryUsed) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocatorMemoryUsed.DiscardUnknown(m)
}

var xxx_messageInfo_AllocatorMemoryUsed proto.InternalMessageInfo

func (m *AllocatorMemoryUsed) GetAllocatorName() string {
	if m != nil {
		return m.AllocatorName
	}
	return ""
}

func (m *AllocatorMemoryUsed) GetTotalBytes() int64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *AllocatorMemoryUsed) GetPeakBytes() int64 {
	if m != nil {
		return m.PeakBytes
	}
	return 0
}

func (m *AllocatorMemoryUsed) GetLiveBytes() int64 {
	if m != nil {
		return m.LiveBytes
	}
	return 0
}

func (m *AllocatorMemoryUsed) GetAllocationRecords() []*AllocationRecord {
	if m != nil {
		return m.AllocationRecords
	}
	return nil
}

func (m *AllocatorMemoryUsed) GetAllocatorBytesInUse() int64 {
	if m != nil {
		return m.AllocatorBytesInUse
	}
	return 0
}

// Output sizes recorded for a single execution of a graph node.
type NodeOutput struct {
	Slot                 int32              `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	TensorDescription    *TensorDescription `protobuf:"bytes,3,opt,name=tensor_description,json=tensorDescription,proto3" json:"tensor_description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NodeOutput) Reset()         { *m = NodeOutput{} }
func (m *NodeOutput) String() string { return proto.CompactTextString(m) }
func (*NodeOutput) ProtoMessage()    {}
func (*NodeOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{2}
}

func (m *NodeOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeOutput.Unmarshal(m, b)
}
func (m *NodeOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeOutput.Marshal(b, m, deterministic)
}
func (m *NodeOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeOutput.Merge(m, src)
}
func (m *NodeOutput) XXX_Size() int {
	return xxx_messageInfo_NodeOutput.Size(m)
}
func (m *NodeOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeOutput.DiscardUnknown(m)
}

var xxx_messageInfo_NodeOutput proto.InternalMessageInfo

func (m *NodeOutput) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *NodeOutput) GetTensorDescription() *TensorDescription {
	if m != nil {
		return m.TensorDescription
	}
	return nil
}

// For memory tracking.
type MemoryStats struct {
	TempMemorySize                 int64    `protobuf:"varint,1,opt,name=temp_memory_size,json=tempMemorySize,proto3" json:"temp_memory_size,omitempty"`
	PersistentMemorySize           int64    `protobuf:"varint,3,opt,name=persistent_memory_size,json=persistentMemorySize,proto3" json:"persistent_memory_size,omitempty"`
	PersistentTensorAllocIds       []int64  `protobuf:"varint,5,rep,packed,name=persistent_tensor_alloc_ids,json=persistentTensorAllocIds,proto3" json:"persistent_tensor_alloc_ids,omitempty"`
	DeviceTempMemorySize           int64    `protobuf:"varint,2,opt,name=device_temp_memory_size,json=deviceTempMemorySize,proto3" json:"device_temp_memory_size,omitempty"`                                        // Deprecated: Do not use.
	DevicePersistentMemorySize     int64    `protobuf:"varint,4,opt,name=device_persistent_memory_size,json=devicePersistentMemorySize,proto3" json:"device_persistent_memory_size,omitempty"`                      // Deprecated: Do not use.
	DevicePersistentTensorAllocIds []int64  `protobuf:"varint,6,rep,packed,name=device_persistent_tensor_alloc_ids,json=devicePersistentTensorAllocIds,proto3" json:"device_persistent_tensor_alloc_ids,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral           struct{} `json:"-"`
	XXX_unrecognized               []byte   `json:"-"`
	XXX_sizecache                  int32    `json:"-"`
}

func (m *MemoryStats) Reset()         { *m = MemoryStats{} }
func (m *MemoryStats) String() string { return proto.CompactTextString(m) }
func (*MemoryStats) ProtoMessage()    {}
func (*MemoryStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{3}
}

func (m *MemoryStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryStats.Unmarshal(m, b)
}
func (m *MemoryStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryStats.Marshal(b, m, deterministic)
}
func (m *MemoryStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryStats.Merge(m, src)
}
func (m *MemoryStats) XXX_Size() int {
	return xxx_messageInfo_MemoryStats.Size(m)
}
func (m *MemoryStats) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryStats.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryStats proto.InternalMessageInfo

func (m *MemoryStats) GetTempMemorySize() int64 {
	if m != nil {
		return m.TempMemorySize
	}
	return 0
}

func (m *MemoryStats) GetPersistentMemorySize() int64 {
	if m != nil {
		return m.PersistentMemorySize
	}
	return 0
}

func (m *MemoryStats) GetPersistentTensorAllocIds() []int64 {
	if m != nil {
		return m.PersistentTensorAllocIds
	}
	return nil
}

// Deprecated: Do not use.
func (m *MemoryStats) GetDeviceTempMemorySize() int64 {
	if m != nil {
		return m.DeviceTempMemorySize
	}
	return 0
}

// Deprecated: Do not use.
func (m *MemoryStats) GetDevicePersistentMemorySize() int64 {
	if m != nil {
		return m.DevicePersistentMemorySize
	}
	return 0
}

// Deprecated: Do not use.
func (m *MemoryStats) GetDevicePersistentTensorAllocIds() []int64 {
	if m != nil {
		return m.DevicePersistentTensorAllocIds
	}
	return nil
}

// Time/size stats recorded for a single execution of a graph node.
type NodeExecStats struct {
	// TODO(tucker): Use some more compact form of node identity than
	// the full string name.  Either all processes should agree on a
	// global id (cost_id?) for each node, or we should use a hash of
	// the name.
	NodeName             string                   `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	AllStartMicros       int64                    `protobuf:"varint,2,opt,name=all_start_micros,json=allStartMicros,proto3" json:"all_start_micros,omitempty"`
	OpStartRelMicros     int64                    `protobuf:"varint,3,opt,name=op_start_rel_micros,json=opStartRelMicros,proto3" json:"op_start_rel_micros,omitempty"`
	OpEndRelMicros       int64                    `protobuf:"varint,4,opt,name=op_end_rel_micros,json=opEndRelMicros,proto3" json:"op_end_rel_micros,omitempty"`
	AllEndRelMicros      int64                    `protobuf:"varint,5,opt,name=all_end_rel_micros,json=allEndRelMicros,proto3" json:"all_end_rel_micros,omitempty"`
	Memory               []*AllocatorMemoryUsed   `protobuf:"bytes,6,rep,name=memory,proto3" json:"memory,omitempty"`
	Output               []*NodeOutput            `protobuf:"bytes,7,rep,name=output,proto3" json:"output,omitempty"`
	TimelineLabel        string                   `protobuf:"bytes,8,opt,name=timeline_label,json=timelineLabel,proto3" json:"timeline_label,omitempty"`
	ScheduledMicros      int64                    `protobuf:"varint,9,opt,name=scheduled_micros,json=scheduledMicros,proto3" json:"scheduled_micros,omitempty"`
	ThreadId             uint32                   `protobuf:"varint,10,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ReferencedTensor     []*AllocationDescription `protobuf:"bytes,11,rep,name=referenced_tensor,json=referencedTensor,proto3" json:"referenced_tensor,omitempty"`
	MemoryStats          *MemoryStats             `protobuf:"bytes,12,opt,name=memory_stats,json=memoryStats,proto3" json:"memory_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *NodeExecStats) Reset()         { *m = NodeExecStats{} }
func (m *NodeExecStats) String() string { return proto.CompactTextString(m) }
func (*NodeExecStats) ProtoMessage()    {}
func (*NodeExecStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{4}
}

func (m *NodeExecStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeExecStats.Unmarshal(m, b)
}
func (m *NodeExecStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeExecStats.Marshal(b, m, deterministic)
}
func (m *NodeExecStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeExecStats.Merge(m, src)
}
func (m *NodeExecStats) XXX_Size() int {
	return xxx_messageInfo_NodeExecStats.Size(m)
}
func (m *NodeExecStats) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeExecStats.DiscardUnknown(m)
}

var xxx_messageInfo_NodeExecStats proto.InternalMessageInfo

func (m *NodeExecStats) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeExecStats) GetAllStartMicros() int64 {
	if m != nil {
		return m.AllStartMicros
	}
	return 0
}

func (m *NodeExecStats) GetOpStartRelMicros() int64 {
	if m != nil {
		return m.OpStartRelMicros
	}
	return 0
}

func (m *NodeExecStats) GetOpEndRelMicros() int64 {
	if m != nil {
		return m.OpEndRelMicros
	}
	return 0
}

func (m *NodeExecStats) GetAllEndRelMicros() int64 {
	if m != nil {
		return m.AllEndRelMicros
	}
	return 0
}

func (m *NodeExecStats) GetMemory() []*AllocatorMemoryUsed {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *NodeExecStats) GetOutput() []*NodeOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *NodeExecStats) GetTimelineLabel() string {
	if m != nil {
		return m.TimelineLabel
	}
	return ""
}

func (m *NodeExecStats) GetScheduledMicros() int64 {
	if m != nil {
		return m.ScheduledMicros
	}
	return 0
}

func (m *NodeExecStats) GetThreadId() uint32 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *NodeExecStats) GetReferencedTensor() []*AllocationDescription {
	if m != nil {
		return m.ReferencedTensor
	}
	return nil
}

func (m *NodeExecStats) GetMemoryStats() *MemoryStats {
	if m != nil {
		return m.MemoryStats
	}
	return nil
}

type DeviceStepStats struct {
	Device               string           `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	NodeStats            []*NodeExecStats `protobuf:"bytes,2,rep,name=node_stats,json=nodeStats,proto3" json:"node_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DeviceStepStats) Reset()         { *m = DeviceStepStats{} }
func (m *DeviceStepStats) String() string { return proto.CompactTextString(m) }
func (*DeviceStepStats) ProtoMessage()    {}
func (*DeviceStepStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{5}
}

func (m *DeviceStepStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceStepStats.Unmarshal(m, b)
}
func (m *DeviceStepStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceStepStats.Marshal(b, m, deterministic)
}
func (m *DeviceStepStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStepStats.Merge(m, src)
}
func (m *DeviceStepStats) XXX_Size() int {
	return xxx_messageInfo_DeviceStepStats.Size(m)
}
func (m *DeviceStepStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStepStats.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStepStats proto.InternalMessageInfo

func (m *DeviceStepStats) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DeviceStepStats) GetNodeStats() []*NodeExecStats {
	if m != nil {
		return m.NodeStats
	}
	return nil
}

type StepStats struct {
	DevStats             []*DeviceStepStats `protobuf:"bytes,1,rep,name=dev_stats,json=devStats,proto3" json:"dev_stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StepStats) Reset()         { *m = StepStats{} }
func (m *StepStats) String() string { return proto.CompactTextString(m) }
func (*StepStats) ProtoMessage()    {}
func (*StepStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e915309f7ed52e5, []int{6}
}

func (m *StepStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepStats.Unmarshal(m, b)
}
func (m *StepStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepStats.Marshal(b, m, deterministic)
}
func (m *StepStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepStats.Merge(m, src)
}
func (m *StepStats) XXX_Size() int {
	return xxx_messageInfo_StepStats.Size(m)
}
func (m *StepStats) XXX_DiscardUnknown() {
	xxx_messageInfo_StepStats.DiscardUnknown(m)
}

var xxx_messageInfo_StepStats proto.InternalMessageInfo

func (m *StepStats) GetDevStats() []*DeviceStepStats {
	if m != nil {
		return m.DevStats
	}
	return nil
}

func init() {
	proto.RegisterType((*AllocationRecord)(nil), "tensorflow.AllocationRecord")
	proto.RegisterType((*AllocatorMemoryUsed)(nil), "tensorflow.AllocatorMemoryUsed")
	proto.RegisterType((*NodeOutput)(nil), "tensorflow.NodeOutput")
	proto.RegisterType((*MemoryStats)(nil), "tensorflow.MemoryStats")
	proto.RegisterType((*NodeExecStats)(nil), "tensorflow.NodeExecStats")
	proto.RegisterType((*DeviceStepStats)(nil), "tensorflow.DeviceStepStats")
	proto.RegisterType((*StepStats)(nil), "tensorflow.StepStats")
}

func init() {
	proto.RegisterFile("tensorflow/core/framework/step_stats.proto", fileDescriptor_1e915309f7ed52e5)
}

var fileDescriptor_1e915309f7ed52e5 = []byte{
	// 804 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xdf, 0x6f, 0xdb, 0x36,
	0x10, 0x86, 0xec, 0xc4, 0x8b, 0xcf, 0xf9, 0xe1, 0x30, 0x45, 0xaa, 0xc5, 0xcb, 0xea, 0x1a, 0x18,
	0xe0, 0x6e, 0x98, 0x33, 0xa4, 0xc3, 0xd6, 0x0d, 0xd8, 0xc3, 0x8c, 0xfa, 0x21, 0x58, 0xeb, 0x05,
	0x4a, 0xbb, 0x57, 0x41, 0x11, 0x2f, 0xab, 0x50, 0x4a, 0x14, 0x48, 0xda, 0x5d, 0xfb, 0xbf, 0xec,
	0x8f, 0xd9, 0x7f, 0xb5, 0xa7, 0x61, 0xe0, 0x91, 0x96, 0x64, 0x3b, 0x79, 0xa3, 0xbe, 0xfb, 0xee,
	0xe3, 0xf1, 0xf8, 0x1d, 0x05, 0x5f, 0x1b, 0x2c, 0xb4, 0x54, 0x77, 0x42, 0x7e, 0xb8, 0x48, 0xa5,
	0xc2, 0x8b, 0x3b, 0x95, 0xe4, 0xf8, 0x41, 0xaa, 0xf7, 0x17, 0xda, 0x60, 0x19, 0x6b, 0x93, 0x18,
	0x3d, 0x29, 0x95, 0x34, 0x92, 0x41, 0xcd, 0x3d, 0xfb, 0xe1, 0xe1, 0xbc, 0x44, 0x08, 0x99, 0x26,
	0x26, 0x93, 0x45, 0xcc, 0x51, 0xa7, 0x2a, 0x2b, 0xed, 0xda, 0x69, 0x9c, 0x5d, 0x3e, 0x9c, 0xe7,
	0x22, 0xdb, 0x39, 0xa3, 0x3f, 0xa0, 0xff, 0x6b, 0xa5, 0x19, 0x61, 0x2a, 0x15, 0x67, 0x4f, 0x61,
	0x9f, 0xf6, 0x89, 0xf3, 0x2c, 0x55, 0x52, 0x87, 0xc1, 0x30, 0x18, 0xb7, 0xa3, 0x1e, 0x61, 0xaf,
	0x09, 0x62, 0x4f, 0xc0, 0x7d, 0xc6, 0xb7, 0x1f, 0x0d, 0xea, 0xb0, 0x45, 0x0c, 0x20, 0x68, 0x6a,
	0x91, 0xd1, 0xdf, 0x2d, 0x38, 0xf1, 0xc2, 0x52, 0xbd, 0xc6, 0x5c, 0xaa, 0x8f, 0x6f, 0x35, 0x72,
	0xf6, 0x15, 0x1c, 0x26, 0x2b, 0x38, 0x2e, 0x92, 0x1c, 0x49, 0xbd, 0x1b, 0x1d, 0x54, 0xe8, 0x3c,
	0xc9, 0xd1, 0xea, 0x1b, 0x69, 0x12, 0xb1, 0xae, 0x4f, 0x10, 0xe9, 0xb3, 0x73, 0x80, 0x12, 0x93,
	0xf7, 0x3e, 0xde, 0xa6, 0x78, 0xd7, 0x22, 0x55, 0x58, 0x64, 0x4b, 0xf4, 0xe1, 0x1d, 0x17, 0xb6,
	0x88, 0x0b, 0xff, 0x06, 0xac, 0xd1, 0x49, 0x45, 0xc7, 0xd6, 0x61, 0x67, 0xd8, 0x1e, 0xf7, 0x2e,
	0xbf, 0x98, 0xd4, 0x6d, 0x9c, 0x6c, 0xf6, 0x26, 0x3a, 0x4e, 0x36, 0x10, 0xcd, 0x9e, 0xc3, 0x69,
	0x7d, 0x24, 0xda, 0x30, 0xce, 0x8a, 0x78, 0xa1, 0x31, 0xdc, 0xa5, 0x7d, 0x4f, 0xaa, 0x28, 0x6d,
	0x7e, 0x55, 0xbc, 0xd5, 0x38, 0x2a, 0x00, 0xe6, 0x92, 0xe3, 0xef, 0x0b, 0x53, 0x2e, 0x0c, 0x63,
	0xb0, 0xa3, 0x85, 0x34, 0xd4, 0x8b, 0xdd, 0x88, 0xd6, 0xec, 0x15, 0xb0, 0xed, 0x5b, 0xa3, 0x93,
	0xf6, 0x2e, 0xcf, 0x9b, 0x35, 0xbe, 0xa1, 0xe5, 0xcb, 0x9a, 0x14, 0x1d, 0x9b, 0x4d, 0x68, 0xf4,
	0x5f, 0x0b, 0x7a, 0xee, 0x1a, 0x6e, 0xac, 0xeb, 0xd8, 0x18, 0xfa, 0x06, 0xf3, 0x32, 0xce, 0x09,
	0x8b, 0x75, 0xf6, 0x09, 0xfd, 0x3d, 0x1f, 0x5a, 0xdc, 0x53, 0xb3, 0x4f, 0xc8, 0xbe, 0x87, 0xd3,
	0x12, 0x95, 0xce, 0xb4, 0xc1, 0xc2, 0xac, 0xf1, 0x5d, 0xd7, 0x1f, 0xd5, 0xd1, 0x46, 0xd6, 0x2f,
	0x30, 0x68, 0x64, 0xf9, 0x83, 0x38, 0xcb, 0x64, 0x5c, 0x87, 0xbb, 0xc3, 0xf6, 0xb8, 0x1d, 0x85,
	0x35, 0xc5, 0x1d, 0x82, 0xda, 0x7d, 0xc5, 0x35, 0xfb, 0x09, 0x1e, 0x73, 0x5c, 0x66, 0x29, 0xc6,
	0x5b, 0x55, 0x92, 0x17, 0xa6, 0xad, 0x30, 0x88, 0x1e, 0x39, 0xca, 0x9b, 0xf5, 0x7a, 0x67, 0x70,
	0xee, 0x53, 0x1f, 0x28, 0x7b, 0xa7, 0x12, 0x38, 0x73, 0xc4, 0xeb, 0xfb, 0x0e, 0x30, 0x87, 0xd1,
	0xb6, 0xcc, 0xd6, 0x39, 0xac, 0x65, 0x9c, 0xd6, 0x97, 0x9b, 0x5a, 0xeb, 0x27, 0x1a, 0xfd, 0xb3,
	0x03, 0x07, 0xf6, 0xc6, 0x67, 0x7f, 0x61, 0xea, 0xae, 0x60, 0x00, 0xdd, 0x42, 0x72, 0x6c, 0x4e,
	0xc1, 0x9e, 0x05, 0x68, 0x00, 0xc6, 0xd0, 0x4f, 0x84, 0xb0, 0x4f, 0x84, 0x32, 0xab, 0x39, 0x74,
	0x53, 0x60, 0xe7, 0xe7, 0xc6, 0xc2, 0x7e, 0x14, 0xbf, 0x85, 0x13, 0x59, 0x7a, 0xa2, 0x42, 0xb1,
	0x22, 0xbb, 0xcb, 0xe9, 0xcb, 0x92, 0xb8, 0x11, 0x0a, 0x4f, 0x7f, 0x06, 0xc7, 0xb2, 0x8c, 0xb1,
	0xe0, 0x4d, 0xb2, 0x1b, 0x90, 0x43, 0x59, 0xce, 0x0a, 0x5e, 0x53, 0xbf, 0xa1, 0x29, 0xd9, 0xe4,
	0x3a, 0x53, 0x1f, 0x25, 0x42, 0xac, 0x91, 0x7f, 0x84, 0x8e, 0x6b, 0xb2, 0x1f, 0xa3, 0x27, 0xf7,
	0x8c, 0x51, 0xf3, 0x25, 0x88, 0x3c, 0x9d, 0x4d, 0xa0, 0x23, 0x69, 0x0a, 0xc2, 0xcf, 0x28, 0xf1,
	0xb4, 0x99, 0x58, 0xcf, 0x48, 0xe4, 0x59, 0xf6, 0x05, 0x31, 0x59, 0x8e, 0x22, 0x2b, 0x30, 0x16,
	0xc9, 0x2d, 0x8a, 0x70, 0xcf, 0xbd, 0x20, 0x2b, 0xf4, 0x95, 0x05, 0xd9, 0x33, 0xe8, 0xeb, 0xf4,
	0x1d, 0xf2, 0x85, 0x40, 0xbe, 0x2a, 0xbd, 0xeb, 0x4a, 0xaf, 0x70, 0x5f, 0xfa, 0x00, 0xba, 0xe6,
	0x9d, 0xc2, 0x84, 0xc7, 0x19, 0x0f, 0x61, 0x18, 0x8c, 0x0f, 0xa2, 0x3d, 0x07, 0x5c, 0x71, 0x36,
	0x87, 0x63, 0x85, 0x77, 0xa8, 0xb0, 0x48, 0x91, 0x7b, 0x03, 0x84, 0x3d, 0xaa, 0xf4, 0xe9, 0xfd,
	0x2f, 0x45, 0x73, 0x12, 0xfb, 0x75, 0xae, 0xf3, 0x03, 0xfb, 0x19, 0xf6, 0x57, 0x66, 0xb4, 0x2e,
	0x08, 0xf7, 0x69, 0xa0, 0x1f, 0x37, 0xa5, 0x1a, 0x73, 0x1a, 0xf5, 0xf2, 0xfa, 0x63, 0x94, 0xc2,
	0xd1, 0x4b, 0x72, 0xd9, 0x8d, 0xc1, 0xd2, 0x99, 0xe8, 0x14, 0x3a, 0xce, 0x78, 0xde, 0x41, 0xfe,
	0x8b, 0xbd, 0x00, 0x20, 0x73, 0xb9, 0x4d, 0x5a, 0x54, 0xef, 0xe7, 0x9b, 0x9d, 0xad, 0xbc, 0x18,
	0x91, 0x13, 0xdd, 0x26, 0x33, 0xe8, 0xd6, 0xf2, 0x2f, 0xa0, 0xcb, 0x71, 0xe9, 0x55, 0x02, 0x52,
	0x19, 0x34, 0x55, 0x36, 0xca, 0x89, 0xf6, 0x38, 0x2e, 0x69, 0x35, 0xfd, 0x0e, 0x42, 0xa9, 0xfe,
	0x6c, 0x72, 0xab, 0xbf, 0xd1, 0xf4, 0xa8, 0x4a, 0xb8, 0xb6, 0x3f, 0x21, 0x7d, 0x1d, 0xfc, 0x1b,
	0x04, 0xb7, 0x1d, 0xfa, 0x23, 0x3d, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x98, 0x28, 0x64, 0x20,
	0x37, 0x07, 0x00, 0x00,
}
